// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: matchups.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLatestCompletedWeek = `-- name: GetLatestCompletedWeek :one
SELECT COALESCE(MAX(week), 0)::INTEGER as latest_week
FROM matchups
WHERE year = $1 AND is_playoff = FALSE
`

func (q *Queries) GetLatestCompletedWeek(ctx context.Context, year int32) (int32, error) {
	row := q.db.QueryRow(ctx, getLatestCompletedWeek, year)
	var latest_week int32
	err := row.Scan(&latest_week)
	return latest_week, err
}

const getMatchupByYearWeekUsers = `-- name: GetMatchupByYearWeekUsers :one
SELECT id, year, week, is_playoff, playoff_round, home_user_id, away_user_id, home_seed, away_seed, home_score, away_score FROM matchups 
WHERE year = $1 AND week = $2 AND home_user_id = $3 AND away_user_id = $4
`

type GetMatchupByYearWeekUsersParams struct {
	Year       int32
	Week       int32
	HomeUserID string
	AwayUserID string
}

func (q *Queries) GetMatchupByYearWeekUsers(ctx context.Context, arg GetMatchupByYearWeekUsersParams) (Matchup, error) {
	row := q.db.QueryRow(ctx, getMatchupByYearWeekUsers,
		arg.Year,
		arg.Week,
		arg.HomeUserID,
		arg.AwayUserID,
	)
	var i Matchup
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Week,
		&i.IsPlayoff,
		&i.PlayoffRound,
		&i.HomeUserID,
		&i.AwayUserID,
		&i.HomeSeed,
		&i.AwaySeed,
		&i.HomeScore,
		&i.AwayScore,
	)
	return i, err
}

const getMatchupsByYear = `-- name: GetMatchupsByYear :many
SELECT
    id,
    year,
    week,
    is_playoff,
    playoff_round,
    home_user_id,
    away_user_id,
    home_seed,
    away_seed,
    home_score,
    away_score
FROM matchups
WHERE year = $1
ORDER BY week ASC, id ASC
`

func (q *Queries) GetMatchupsByYear(ctx context.Context, year int32) ([]Matchup, error) {
	rows, err := q.db.Query(ctx, getMatchupsByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Matchup
	for rows.Next() {
		var i Matchup
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.Week,
			&i.IsPlayoff,
			&i.PlayoffRound,
			&i.HomeUserID,
			&i.AwayUserID,
			&i.HomeSeed,
			&i.AwaySeed,
			&i.HomeScore,
			&i.AwayScore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeeklyHighScore = `-- name: GetWeeklyHighScore :one
SELECT 
    CASE 
        WHEN home_score > away_score THEN home_user_id 
        ELSE away_user_id 
    END::TEXT AS winner_user_id,
    CASE 
        WHEN home_score > away_score THEN home_score 
        ELSE away_score 
    END::FLOAT AS winning_score,
    year,
    week
FROM matchups 
WHERE year = $1 AND week = $2 AND is_playoff = FALSE
ORDER BY GREATEST(home_score, away_score) DESC 
LIMIT 1
`

type GetWeeklyHighScoreParams struct {
	Year int32
	Week int32
}

type GetWeeklyHighScoreRow struct {
	WinnerUserID string
	WinningScore float64
	Year         int32
	Week         int32
}

func (q *Queries) GetWeeklyHighScore(ctx context.Context, arg GetWeeklyHighScoreParams) (GetWeeklyHighScoreRow, error) {
	row := q.db.QueryRow(ctx, getWeeklyHighScore, arg.Year, arg.Week)
	var i GetWeeklyHighScoreRow
	err := row.Scan(
		&i.WinnerUserID,
		&i.WinningScore,
		&i.Year,
		&i.Week,
	)
	return i, err
}

const insertMatchup = `-- name: InsertMatchup :one
INSERT INTO matchups (
    year,
    week,
    is_playoff,
    playoff_round,
    home_user_id,
    away_user_id,
    home_seed,
    away_seed,
    home_score,
    away_score
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id
`

type InsertMatchupParams struct {
	Year         int32
	Week         int32
	IsPlayoff    pgtype.Bool
	PlayoffRound pgtype.Text
	HomeUserID   string
	AwayUserID   string
	HomeSeed     pgtype.Int4
	AwaySeed     pgtype.Int4
	HomeScore    float64
	AwayScore    float64
}

func (q *Queries) InsertMatchup(ctx context.Context, arg InsertMatchupParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertMatchup,
		arg.Year,
		arg.Week,
		arg.IsPlayoff,
		arg.PlayoffRound,
		arg.HomeUserID,
		arg.AwayUserID,
		arg.HomeSeed,
		arg.AwaySeed,
		arg.HomeScore,
		arg.AwayScore,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const updateMatchupScores = `-- name: UpdateMatchupScores :exec
UPDATE matchups 
SET home_score = $3, away_score = $4
WHERE year = $1 AND week = $2 AND home_user_id = $5 AND away_user_id = $6
`

type UpdateMatchupScoresParams struct {
	Year       int32
	Week       int32
	HomeScore  float64
	AwayScore  float64
	HomeUserID string
	AwayUserID string
}

func (q *Queries) UpdateMatchupScores(ctx context.Context, arg UpdateMatchupScoresParams) error {
	_, err := q.db.Exec(ctx, updateMatchupScores,
		arg.Year,
		arg.Week,
		arg.HomeScore,
		arg.AwayScore,
		arg.HomeUserID,
		arg.AwayUserID,
	)
	return err
}

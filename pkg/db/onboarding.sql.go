// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: onboarding.sql

package db

import (
	"context"
)

const checkSleeperUserClaimed = `-- name: CheckSleeperUserClaimed :one
SELECT EXISTS(
    SELECT 1 FROM users 
    WHERE id = $1 AND discord_id != '' AND discord_id IS NOT NULL
) AS is_claimed
`

// Check if a Sleeper user is already claimed by someone else
func (q *Queries) CheckSleeperUserClaimed(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, checkSleeperUserClaimed, id)
	var is_claimed bool
	err := row.Scan(&is_claimed)
	return is_claimed, err
}

const getUserByDiscordID = `-- name: GetUserByDiscordID :one
SELECT id, name, discord_id, onboarding_complete, created_at FROM users WHERE discord_id = $1 LIMIT 1
`

// Get user record by Discord ID
func (q *Queries) GetUserByDiscordID(ctx context.Context, discordID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByDiscordID, discordID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscordID,
		&i.OnboardingComplete,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersWithoutDiscordID = `-- name: GetUsersWithoutDiscordID :many
SELECT id, name, discord_id, onboarding_complete, created_at FROM users 
WHERE discord_id = '' OR discord_id IS NULL
ORDER BY name
`

// Get all Sleeper users that haven't been claimed by Discord users yet
func (q *Queries) GetUsersWithoutDiscordID(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersWithoutDiscordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DiscordID,
			&i.OnboardingComplete,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserOnboarded = `-- name: IsUserOnboarded :one
SELECT EXISTS(
    SELECT 1 FROM users 
    WHERE discord_id = $1 AND onboarding_complete = true
) AS is_onboarded
`

// Check if a Discord user has already completed onboarding
func (q *Queries) IsUserOnboarded(ctx context.Context, discordID string) (bool, error) {
	row := q.db.QueryRow(ctx, isUserOnboarded, discordID)
	var is_onboarded bool
	err := row.Scan(&is_onboarded)
	return is_onboarded, err
}

const updateUserDiscordID = `-- name: UpdateUserDiscordID :exec
UPDATE users 
SET discord_id = $2, onboarding_complete = true 
WHERE id = $1 AND (discord_id = '' OR discord_id IS NULL)
`

type UpdateUserDiscordIDParams struct {
	ID        string
	DiscordID string
}

// Link a Discord user ID to a Sleeper user account
func (q *Queries) UpdateUserDiscordID(ctx context.Context, arg UpdateUserDiscordIDParams) error {
	_, err := q.db.Exec(ctx, updateUserDiscordID, arg.ID, arg.DiscordID)
	return err
}
